# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


#tu27n7amtnpui2ttmgl3nxy2b3tpgo7gwhrsymgn3qr6nryloh6a


trigger:
- master


pool: 
  vmImage: 'ubuntu-latest'
  
variables:
- template: simple-param.yml  # Template reference

  
stages:
- stage: Create_Environment
  displayName: Create Environment
  
  jobs:
  - job: create_environemnt
    displayName: create environemnt   
    steps:
     
     - script: echo Hello, world!
       displayName: 'Run a one-line script'
  
     - script: sudo apt-get autoremove python2.7
       displayName: 'Remove Python 2.7'
  
  
     - script: sudo apt-get install python3.6
       displayName: 'Install Python 3.6'
       
     - script: pip3 install wheel 
       displayName: 'Install Pyhton wheel'
       
     - script: pip3 install --upgrade pip
       displayName: 'install Pyhton pip'

     - script: pip3 install packaging
       displayName: 'Install Python packaging'

     - script: sudo apt-get install python3-setuptools
       displayName: 'Install Python setuptools'

     - script: pip3 install ansible
       displayName: 'Install ansible'

     - script: pip3 install ansible[azure]
       displayName: 'Install Ansible and the Azure modules'
    
     - script: ~/.local/bin/ansible-playbook create_env.yml
       displayName: 'createenv ansible script'


-  stage: Build
   displayName: Build stage
  
   jobs:  
    # steps:
    - job: Build1
      displayName: Build1
      pool:  
        vmImage: 'ubuntu-latest'
      steps:
        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            command: buildAndPush
            repository: ${{ variables.imageRepository }}
            dockerfile: $(Build.SourcesDirectory)/$(dockerfilePath)
          #containerRegistry: $(dockerRegistryServiceConnection)
            containerRegistry: dockerfinalcon
            tags: |
              $(tag)


      
        - task: KubernetesManifest@0
          displayName: Create imagePullSecret
          inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: dockerfinalcon

              
        - task: KubernetesManifest@0
          displayName: Deploy to Kubernetes cluster
          inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)



           

  
  
  
